{"./":{"url":"./","title":"前言","keywords":"","body":" \"开启Python人工智能之旅\" Python—人工智能主流语言 Python是人工智能（AI）和数据分析常用语言 Google开源机器学习框架：TensorFlow 开源社区主推学习框架：Scikit-learn 百度开源深度学习框架：Paddle ... ... 以上框架，均是由Python语言开发。 不仅如此，Python还含有优质的文档、丰富的AI库、机器学习库、自然语言和文本处理库。尤其是Python中的机器学习，实现了人工智能领域中大量的需求。 人工智能时代来临 规模将持续增长 政策：在《国务院关于积极推进“互联网+”行动的指导意见》中被推上国家战略层面 经济：互联网经济持续增长，2015年中国网络经济增长约33%，规模超千亿，人工智能创业公司共获得投资资金12.6亿。 社会：我国科研投入占GDP20%，仅次于美国，信息技术投入占“863计划”15.5%，是国家重点投资领域。 近五年科研人员保持20%的增长，给行业带来人才红利。 技术：目前在视觉识别、语音识别等领域率先技术突破，处于国际领先水平。 人工智能未来蓝图 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/intro.html":{"url":"part1/intro.html","title":"1. Python基础","keywords":"","body":"Python简介 1. Python介绍 2. python应用场景 3. Python版本 1. Python介绍 Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。 Pythoy具有简单、易学、免费、可移植、丰富扩展库等优点。但同时也存在执行效率慢的问题，这也是解释型语言所通有的，但是这个缺点也将被计算机越来越强大的性能所弥补。 C/C++等编译型语言一次编辑后即可交给CPU一次性执行，所以执行效率较高。Python等解释型语言则不会执行一次性编译，解释型语言的编译器也称为解释器，解释器会将代码顺序逐行解释并交给CPU执行，其过程为解释一行执行一行，执行遇到错误则终止程序执行。 Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译） 2. Python应用场景 Web应用开发 Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。 操作系统管理、服务器运维的自动化脚本 在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。 网络爬虫 Python有大量的HTTP请求处理库和HTML解析库，并且有成熟高效的爬虫框架Scrapy和分布式解决方案scrapy-redis，在爬虫的应用方面非常广泛。 科学计算 NumPy、SciPy、Pandas、Matplotlib可以让Python程序员编写科学计算程序。 桌面软件 PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。 服务器软件（网络软件） Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。 游戏 很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。 构思实现，产品早期原型和迭代 Google、NASA、Facebook都在内部大量地使用Python。 3. Python版本 目前市场上有两个Python版本并存，分别是Python2.x和Python3.x。 Python2.x是过去版本解释器名称是python，Python3.x是现在主流版本，解释器名称为python3。 相对于2.x版本3.x是一个较大的升级，不能向下兼容 为了照顾现有程序，官方提供了一个过渡版本 -- python2.6 基本使用了python2.x的语法和库 同时考虑了向python3.x的迁移，允许使用部分python3.x的语法 2010年推出的 python2.7 被确定为最后一个python2.x版本 开发中如果无法立即使用Python3.x(有极少的第三方库不兼容3.x) 先使用Python3.x进行开发 然后使用Python2.6/2.7来执行，并做一些兼容性处理 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/ide.html":{"url":"part1/ide.html","title":"1.1 执行方式","keywords":"","body":"Python执行方式 1. 解释器\b执行 2. 交互式执行python 3. Python开发IDE 1. 解释器执行 # python 2.x解释器 $ python xxx.py · # python 2.x解释器 $ python3 xxx.py python解释器有多语言实现，如： CPython 官方C语言实现 Jython Java平台 IronPython .Net和Mono平台 Pypy Python实现，支持JIT即时编辑 mac OS 安装 Python3 mac OS 中默认安装了Python 2.7,如果需要使用Python 3.x可以自行安装。Mojave中使用Homebrew安装Python3时会存在链接失败的问题。系统出于安全性考虑不允许使用sudo或root用户执行安装操作。情况如下 $ brew install python3 Warning: python3 3.7.0 is already installed, it's just not linked. You can use `brew link python3` to link this version. $ brew link python3 Linking /usr/local/Cellar/python3/3.6.3... Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks 查看发现路径/usr/local/Frameworks并不存在，我们可以创建此目录并给予操作权限。 $ sudo mkdir /usr/local/Frameworks $ sudo chown $(whoami):admin /usr/local/Frameworks 完成后重新尝试链接成功 $ brew link python3 Linking /usr/local/Cellar/python3/3.6.3... 1 symlinks created 2. 交互式执行Python 1) Python Shell 直接在Python的shell中输入Python代码，可以立即查看程序执行结果，此为交互式运行Python。 交互式运行方式适合学习或验证Python语法或局部代码，但是代码不能保存，不适合运行较大的程序。 可以使用使用 exit() 函数或 ctrl + D 退出Python Shell。 2) IPython IPython是一个第三方python的交互式shell，功能远胜于python shell。 支持代码智能提示，自动补全 支持自动缩紧 内置常用功能函数 支持bash shell,可以直接使用Linux命令 IPython存在IPython 2.x和3.x两个版本。可以直接使用 exit 指令退出 mac OS 安装 IPython3 在mac中安装IPython有很多方式，如Homebrew,pip等。 $ brew install ipython 运行ipython时可能会遇到以下错误 Traceback (most recent call last): File \"/usr/local/Cellar/ipython/7.0.1/libexec/bin/ipython\", line 6, in from pkg_resources import load_entry_point ModuleNotFoundError: No module named 'pkg_resources' \b关于此错误，网上说法众说纷纭。大多是说因为mac的环境配置等问题引发此问题，而mac系统中部分组件需要默认安装的python2.7来执行，所以很多python2.7的配置即使使用root用户也不允许修改，但是我们可以修改自己安装的Python3.x环境。通过以下命令可以修复此问题。 确保pip已正确安装 $ pip --version 若未安装则可执行以下命令安装 $ sudo python3 -m ensurepip --default-pip 确保pip,setuptools,wheel最新 $ sudo python3 -m pip install --upgrade pip setuptools wheel 执行完毕后重试执行ipython成功 3. Python开发IDE 推荐使用PyCharm。Pycharm是流行的Python集成开发环境,支持Windows/mac OS/Linux。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/standard.html":{"url":"part1/standard.html","title":"1.2 代码规范","keywords":"","body":"代码规范 1. 注释 2. 中文支持 3. 命名规则 4. 代码规范 1. 注释 python单行注释使用#,多行注释使用'''或\"\"\"。 # 单行注释 ''' 这里是 多行注释 ''' \"\"\" 双引号也可以 多行注释 \"\"\" 2. 中文支持 Python2不支持直接使用中文，仅支持ASCII。如果要使用中文需要在文件首行添加 #coding=utf-8即可。python语法规范推荐使用# -*- coding:utf-8 -*- # -*- coding:utf-8 -*- print(\"你好\") 3. 命名规则 Python中标识符 大小写敏感 官方推荐使用lower_with_under命名(类和扩展则使用大驼峰命名法) 避免于系统关键字冲突 查看系统关键字 import keyword keyword.kwlist # 以下为输出结果 ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 4. 代码规范 Python官方提供了一系列的PEP(Python增强规范)文档。其中第8篇专门针对Python的代码格式给出了建议，俗称 PEP8 规范文档： PEP8: https://www.python.org/dev/peps/pep-0008/ Google文档: https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/ © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/variabletype.html":{"url":"part1/variabletype.html","title":"1.3 数据类型","keywords":"","body":"数据类型 1. 变量类型 2. 数据类型转换 1. 数据类型 python中主要包含以下数据类型： 数字型 整型(int) 浮点型(float) 布尔型(bool) Python中布尔型于C语言的真假类似，0 为Ture，非0 为False 复数型(complex) 非数字类型 字符串(str) 列表 元组 字典 Python2.x中整数根据长度分为 int(整型) 和 long(长整型)类型 python在定义变量的时不需要指定变量类型。程序运行时解释器会自动根据变量内容推断数据类型。 type() 可以查看数据类型。type(123) -> int 2. 数据类型转换 不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算 bool类型在与数字类型运算时，True为1,False为0 字符串类型能直接于数字类型运算 函数 说明 int(x [,base ]) 将x转换为一个整数 float(x ) 将x转换为一个浮点数 complex(real [,imag ]) 创建一个复数，real为实部，imag为虚部 str(x ) 将对象 x 转换为字符串 repr(x ) 将对象 x 转换为表达式字符串 eval(str ) 将字符串形式的数据，转换为原本的类型 tuple(s ) 将序列 s 转换为一个元组 list(s ) 将序列 s 转换为一个列表 chr(x ) 将一个整数转换为一个Unicode字符 ord(x ) 将一个字符转换为它的ASCII整数值 hex(x ) 将一个整数转换为一个十六进制字符串 oct(x ) 将一个整数转换为一个八进制字符串 bin(x ) 将一个整数转换为一个二进制字符串 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/inout.html":{"url":"part1/inout.html","title":"1.4 输入输出","keywords":"","body":"输入输出 1. 输入 2. 输出 1. 输入 Python捕获用户输入使用input函数。任何输入都将以str类型接收。 age = input(\"请输入您的年龄\") print(age) python2.x中使用raw_input函数获取用户输入，而input则只能接收表达式。python3.x已将两者合并为input函数 2. 输出 Python中输出内容使用Print函数。普通的输入一个字符串可以直接使用print(str)如,print(\"Hello\")。如果要按照特定格输出内容或者输出动态内容，就需要利用格式化输出，Python的格式化输出于C语言类似。 格式符 转换 %c 字符 %s 字符串 %d 十进制整数。%06d表示至少6位整数,不足6位自动左侧补0,超过6为正常输出 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写字母0x） %X 十六进制整数（大写字母0X） %f 浮点数。%.2f表示显示2位小数,不足2为右侧自动补0，超过6位只截取显示2位 %e 科学计数法（小写'e'） %E 科学计数法（大写“E”） %g ％f和％e 的简写 %G ％f和％E的简写 格式化输出中使用使用%%输出% name = \"colin\" print(\"my name is %s\" %name) age = 20 print(\"I'm %d years old\" %age) idno=1 print(\"my id number is %06d\" %idno) phone=110 balance=10.2 print(\"my phone number is %s and \\nits balance is %.2f\" %(phone,balance)) percent=0.875 print(\"my homework is finished about %.2f%%\" %(percent*100)) 输出内容为 my name is colin I'm 20 years old my id number is 000001 my phone number is 110 and its balance is 10.20 my homework is finished about 87.50% print函数end参数控制输出内容以什么结尾，默认为end='\\n'输出完成自动换行,如果想单行输出可以指定end='' print(123) print(456) # 输出结果 123 456 print(123,end=' ') print(456) # 输出结果 123 456 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/operator.html":{"url":"part1/operator.html","title":"1.5 运算符","keywords":"","body":"运算符 1. 算术运算符 2. 赋值运算符 1. 算术运算符 运算符 描述 实例 + 加 两个对象相加 a + b 输出结果 30 - 减 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200 / 除 b / a 输出结果 2 // 取整除 返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0 % 取余 返回除法的余数 b % a 输出结果 0 ** 指数 a**b 为2的10次方， 输出结果 1024 *运算符也可以用于字符串类型，计算结果是字符串重复次数的结果。如：\"-\"*5 结果为 ----- 2. 赋值运算符 运算符 描述 实例 = 赋值运算符 把 = 号右边的结果 赋给 左边的变量，如 num = 1 + 2 * 3，结果num的值为7 += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c = a 等效于 c = c a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a 3. 比较运算符 运算符 描述 示例 == 检查两个操作数的值是否相等，如果是则条件变为真。 如a=3,b=3，则（a == b) 为 True != 检查两个操作数的值是否相等，如果值不相等，则条件变为真。 如a=1,b=3，则(a != b) 为 True > 检查左操作数的值是否大于右操作数的值，如果是，则条件成立。 如a=7,b=3，则(a > b) 为 True 检查左操作数的值是否小于右操作数的值，如果是，则条件成立。 如a=7,b=3，则(a >= 检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。 如a=3,b=3，则(a >= b) 为 True 检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。 如a=3,b=3，则(a 4. 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔\"与\"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 True and False， 返回 False。 or x or y 布尔\"或\"：如果 x 是 True，它返回 True，否则它返回 y 的值。 False or True， 返回 True。 not not x 布尔\"非\"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not True 返回 False, not False 返回 True © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/processctrl.html":{"url":"part1/processctrl.html","title":"1.6 流程控制语句","keywords":"","body":"流控制语句 1. 条件语句 2. 循环语句 1. 条件语句 1.1 if语句 if condition1 : do something elif condition2 : do something elfi condition3 : do something else : do something if之后判断条件可以省略括号，如果判断条件较长则可以使用括号后将条件换行 判断条件之后使用: 执行内容之前的代码缩进为一个tab键，或者4个空格。Tab和空格不可混用 \b缩进相同的代码视作一个代码块，而不是通过{}来界定 elif是C#语言中else if的缩写 import random player = int(input('请输入：剪刀(0) 石头(1) 布(2):')) computer = random.randint(0,2) if ((player == 0 and computer == 2) or (player ==1 and computer == 0) or (player == 2 and computer == 1)): print('获胜，哈哈，你太厉害了') elif player == computer: print('平局，要不再来一局') else: print('输了，不要走，洗洗手接着来，决战到天亮') 2. 循环语句 2.1 while while condition : do something # 求0-100之间偶数和 i = 0 sum = 0 while i Python不支持 i++/i--等自增自减等语法 2.2 for in Python的for in循环与JavaScript类似,相当与C#的foreach for x in \"name\": print(x) # 输出结果 n a m e © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/function.html":{"url":"part1/function.html","title":"1.7 函数","keywords":"","body":"函数 1. 函数定义与调用 2. 函数参数 3. 变量作用域 1. 函数定义与调用 # 定义函数 def function_name(arg1, arg2, ...): ''' 函数注释文档 :param arg1: 第一个参数说明 :param arg2: 第二个参数说明 :...:其他参数说明 :return: 函数返回值 ''' do something # 调用函数 function_name(arg1, arg2) function_name(arg2=sth, arg1=sth) 函数必须先定义后调用，Python顺序逐行解释执行 函数注释文档类似于C#中///中对函数的说明，说明可以在Quick Documentation中查看 函数参数默认按照函数定义顺序书写。如果只提供部分参数或者无序提供，可以显式声明形参名称 Python不支持函数重载 def sum(a, b): ''' 计算两个数字的和 :param a: 第一数字 :param b: 第二个数字 :return: 和值 ''' return a + b sum(1, 2) sum(b=3, a=1) 2. 函数参数 2.1 缺省参数 在形参中默认有值的参数，称之为缺省参数，缺省位于参数列表的最后面。 def print_info(name, age=18, gender='男'): print(\"name = %s\\t age = %d\\t gender = %s\" % (name, age, gender)) print_info(\"colin\") # 输出 name = colin age=18 gender=男 2.2 不定长参数 有时可能需要一个函数能处理比当初声明时更多的参数, 这些参数叫做不定长参数，声明时不会命名，类似与C#中可变参数。 语法格式如下： def functionname([formal_args,] *args, **kwargs): do something *args会存放所有未命名的变量参数，args为元组 **kwargs会存放命名参数，即形如key=value的参数， kwargs为字典 如果同时存在*args,**kwargs,缺省参数。三者的顺序为 *args 缺省参数 **kwargs 如果参数较福娃或不确定长度，也可使用元组字典等复杂类型传参 def fun(a, b, *args, **kwargs): print(\"a =%d\" % a) print(\"b =%d\" % b) print(\"args:\") print(args) print(\"kwargs: \") for key, value in kwargs.items(): print(\"key=%s\" % value) fun(1, 2, 3, 4, 5, m=6, n=7, p=8) # 输出结果为 a =1 b =2 args: (3, 4, 5) kwargs: key=6 key=7 key=8 3. 变量作用域 函数内部定义的变量为局部变量，外部的为全局变量。如果在函数内部定义了与全局变量同名的局部变量，则变量的修改只在函数内部生效，不会修改全局变量 如果在函数中出现global全局变量的名字 那么这个函数中即使出现和全局变量名相同的变量名 = 数据 也理解为对全局变量进行修改，而不是定义局部变量 a = 0 def fun1(): a = 100 print(a) def fun2(): print(a) def fun3(): global a a=200 print(a) def fun4(): print(a) fun1() fun2() fun3() fun4() # 输出结果 100 0 200 200 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "},"part1/module.html":{"url":"part1/module.html","title":"2. 模块","keywords":"","body":"模块 1. 模块概念 有过C语言编程经验的朋友都知道在C语言中如果要引用sqrt函数，必须用语句#include 引入math.h这个头文件，否则是无法正常进行调用的。 在Python中有一个概念叫做模块（module），这个和C语言中的头文件以及Java中的包很类似。模块就好比是工具包，要想使用这个工具包中的工具(就好比函数)，就需要导入这个模块 2. 定义模块 在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。如果模块需要在其他地方使用，文件名需要严格按照标识符命名规范起名。模块中的函数和全局变量都可以提供给外部调用 3. 使用模块 1) import 在Python中用关键字import来引入某个模块。使用模块名.成员名方式调用的。 import math # 引入math模块 math.sqrt(4) # 调用math模块sqrt函数 2) from ... import ... 如果要引用某个模块中指定成员,可以使用from .. import ...语法。这只会单独引入指定的成员，而不会引入整个模块。 from math import sqrt,sin # 引入math模块的sqrt和sin函数 sqrt(4) # 调用引入的模块函数 sin(60) ''' 此方式引入，调用函数时只能给出函数名，不能给出模块名 当多个模块中含有相同名称函数时，后面引入会覆盖前面引入 如先引入A模块funciton(),再引入B模块function(),调用function函数会执行B模块的function() ''' 引入模块全部内容 如果要引入一个模块的全部内容有以下两种方式： import module from module import * 第一种方式通过模块名.成员名访问模块成员。第二种方式直接使用成员名访问模块成员，会存在不同模块见同名成员覆盖的问题。推荐使用第一种 3) as import模块时可以使用as关键字定义模块或模块成员别名。定义别名后原名不能再使用。 模块别名 import math as mt mt.sqrt(4) 模块成员别名 from math import sqrt as kf kf(4) 4）定位模块 当你导入一个模块，Python解析器对模块位置的搜索顺序是： 当前目录 Shell变量PYTHONPATH下的每个目录。 默认路径。UNIX下，默认路径一般为/usr/local/lib/python/ 模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。 4. 测试模块 在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息。 我们期望模块中测试的代码不会在外部被执行。Python文件在执行时有一个__name__变量来表示当前内容被执行的文件。如果在模块本文件中执行则此变量为__main__,否则为正在执行的引用此模块的文件名(不含扩展名)。以此，我们可以选择性的执行模块代码。 def sum(a, b): return a + b # 模块内测试代码 if __name__ == '__main__': print('test inside module: %d + %d = %d' % (1, 2, sum(1, 2))) 5. 包 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-08 19:34:01 "}}