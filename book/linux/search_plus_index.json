{"./":{"url":"./","title":"前言","keywords":"","body":" \"开启Linux之旅\" Linux—流行的服务器操作系统 我们常用的操作系统是微软的 Windows 或是苹果的 OS X，因为它容易操作，所以使用者很多。 其实还有一种操作系统，这个操作系统本身就是开源免费的，谁都可以免费使用和安装，它就是 linux。 Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。 可是国内很少有用户使用 linux，主要是这个需要学习，不然很难操作。 本教程，坚持“理论够用、侧重实用”的原则，对 Linux 常用功能做了较为简略阐述，来帮助大家快速学习和入门这个操作系统。 Linux内核与发行版 内核版本 内核(kernel)是Linux系统的核心，是运行程序和管理硬件设备的核心程序，它提供了一个在裸设备与应用程序的抽象层 Linux内核版本分为 稳定版 和 开发版 稳定版： 具有工业级强度，可以广泛的应用和部署。新的稳定版相对于旧版只是修正bug和加入新的驱动程序 开发版： 由于要试验各种解决方案，所以更新和变化很快 内核源码网址：https://www.kernel.org 发行版本 Linux发行版(也称GNU/Linux发行版) 是基于Linux内核版本之上，Linux发行版则是基于内核版本之上又添加了一些工具软件共同构成的一套庞大复杂的操作系统。虽然内核都是一样的，但添加部分各不相同，这就构成了不同的发行版本。 常见的发行版有 Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/directive.html":{"url":"part1/directive.html","title":"1. Linux命令简介","keywords":"","body":"Linux命令简介 1. 图形界面还是命令窗口 2. 命令格式 3. 查阅命令帮助信息 1. 图形界面还是命令窗口 对于 linux 的应用，我想大多数都是用在服务器领域，对于服务器来讲真的没有必要跑一个图形界面。所以我们平时安装 linux 操作系统时往往是不安装图形界面的。说到这里也许你会有疑问，图形界面还能选择装或者不装？ 是的，虽然 linux 和微软的 Windows 一样同位操作系统，但是它们有一个很大的区别就是 Windows 操作系统的图形界面是和内核一体的，俗称微内核，而 linux 操作系统图形界面就像一个软件一样，和内核并不是一体的。所以 linux 你可以选择不安装图形界面，这样不仅不影响服务器的正常使用还可以节省系统资源的开销，何乐而不为呢？ 如果你对 linux 超级感兴趣，想使用 linux 就像使用 Windows 一样，那你可以安装图形界面，可以像 Windows 一样来体验 linux 也是蛮不错的。但是如果你想成为一个专业的 linux 系统工程师，那我建议你从第一天开始就不要去安装图形界面，从命令窗口开始熟悉它。 另外一点值得说的是，日常应用中，我们都是远程管理服务器的，不可能开着图形界面来让你去操作，虽然目前也有相应的工具支持远程图形连接服务器，可是那样太消耗网络带宽资源，所以从这方面来考虑还是建议你不要使用图形界面。 命令窗口中只能使用Linux命令来完成各种操作，所以接下来就让我们一起来认识Linux命令吧 😄😄😄 2. 命令格式 $ command [-options] [parameter] 说明： command:命令名，一般为功能英文缩写 [-options]:命令选项，对命令进行控制。可同时使用多个选项，效果叠加。如：ls -l -h -a或ls -lha，两者等价，且选项顺序无关 [parameter]:命令参数，可以任意多个 []代表参数可选 3. 查阅命令帮助信息 1) --help # 显示command命令的帮助信息 $ command --help 2) man # 查阅command命令的使用手册 $ man command man 是manual缩写，是Linux提供的一个手册，包含了绝大部分的命令、函数的详细使用说明 使用 man 查看帮助时常用操作键： 操作键 功能 Blank 下一屏 Enter 下一行 b 上一屏 q 退出 /keyword 搜索关键字 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/directory.html":{"url":"part1/filemg/directory.html","title":"2.1 目录结构","keywords":"","body":"Linux目录结构 Linux的文件系统是采用层级式的树状目录结构，在此结构中的最上层是根目录\"/\"。 Linux文件或目录名称最长有256个字符 Linux文件和目录名称大小写敏感 以.开头的文件为隐藏文件 同级目录中，不允许文件和目录同名。 常用目录速查表: 目录 说明 / 根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。所有的东西都是从这里开始 /bin(binary) 存放二进制程序和系统常用命令,主要用于具体应用 /sbin(system binary) 存放系统专用二进制程序和命令，需一定权限执行的命令 /usr 存放用户使用的系统命令和应用程序等信息，类似windows的program files /usr/bin 存放后期安装的一些软件 /usr/sbin 存放超级用户的一些管理程序 /boot 放置linux系统启动时用到的一些文件，如Linux的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub /dev 存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt /etc 系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d /home 一般用户的主目录或ftp站点目录 /lib、/usr/lib、/usr/local/lib 系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助 /lost+fount 系统异常产生错误时，会将一些遗失的片段放置于此目录下 /mnt、/media 光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。 /proc 此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等 /root 管理员主目录 /tmp 一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下 /srv 服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内 /usr 应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc: 系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录。 /var 放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下 /opt 给主机额外安装软件所存放的目录 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/view.html":{"url":"part1/filemg/view.html","title":"2.2 查看文件目录","keywords":"","body":"查看文件目录 命令 说明 cd [dir] 切换到指定目录 ls [-options] [dir,file] 查看指定目录所有内容 tree [-options] [dir] 可以以树状图方式展示目录内容(层级子目录及文件) pwd [-options] 打印当前工作目录 cat [-options] [file] 查看文件内容/创建文件/文件合并/追加文件内容等 more [-options] file 分页显示文件内容 1. cd 命令 # 命令格式 $ cd [dir] cd是change directory缩写，其功能为改变当前工作目录。 命令 含义 cd 切换到当前用户主目录(/home/username) cd ~ 切换到当前用户主目录(/home/username) cd . 保持当前目录不变 cd .. 切换到上级目录 cd - 在上次目录和当前目录来换切换 2. ls 命令 # 命令格式 $ ls [-options] [dir,file] ls是list缩写，其功能为列出目录的内容(文件及子目录)，类似于Dos的dir命令 2.1 options options 含义 -a 显示目录下 所有 子目录与文件，包含隐藏文件 -l 以列表方式显示文件的详细信息 -h 配合-l以人性化的方式显示 文件大小,-h 单独使用没有效果 注：options可以叠加使用且顺序无关。 # 以下所有命令等价 $ ls -a -l -h $ ls -l -h -a $ ls -alh $ ls -lha 2.2 parameter parameter可以为文件或目录。parameter为目录则列出给定目录下的内容，parameter为文件名则列出给定文件。 parameter可以使用通配符进行模糊匹配。模糊匹配结果为多个时会列出匹配的所有文件和目录。通配符使用方式与正则类似。 通配符 含义 * 任意多个任意字符 ? 一个任意字符 [] 匹配字符组中任意一个。[1,2,3]等价于[1-3],[a,b,c]等价于[a-c] $ ls colin* # 匹配 以colin开头 $ ls colin? # 匹配 以colin+单个字符 $ ls colin[1-3] # 匹配 colin1,colin2,colin3 2.3 ls -l 内容详解 如上图所示，各列依次为 权限 | 硬链接数 | 所有者 | 所在组 | 文件尺寸 | 修改时间 | 名称 1) 权限 权限列共有10个字符组成，其含义如下： 类别所有者权限所在组权限其他组权限 d (目录)rwxr-xr-x - (普通文件)rw-r--r-- 第一列文件类型速查表如下(仅供查阅)，其中d (目录),- (普通文件)最为常见： 标识符 含义 d 目录 - 普通文件 b 块特殊文件 c 字符特殊文件 l 软链接文件。软链接文件名列格式为: 链接名 -> 源文件地址 p 先进先出（FIFO）的管道特殊文件 s 本地套接字 每组权限三列依次为 读|写|执行。r表示可读;w表示可写;x表示可执行;-表示无对应权限 关于权限的详细信息参阅 权限管理 2) 硬链接数 关于硬链接数，可参阅 硬链接数 3. tree 命令 # 命令格式 $ tree [-options] [dir] tree可以以树状图方式展示目录内容(层级子目录及文件) 系统若没有安装tree命令，可以通过sudo apt install tree来进行安装。 options 含义 -d 限制只显示目录，忽略文件 # 显示当前目录树状图 $ tree # 显示～/Desktop 的目录树状结构 $ tree -d ~/Desktop 4. cat 命令 # 命令格式 $ cat [-options] [file] cat是Concatenate缩写，其功能包含查看文件内容、创建文件、文件合并、追加文件内容等。其中最常用来查看文本文件内容。 cat会一次显示所有内容，适合 查看内容较少 的文本文件 options 含义 -b 显示非空行号,空行也显示但不编行号,可以用于统计有效代码行数 -n 显示所有行号 nl file 与 cat -b file 效果相同，都可以查看文本文件内容并显示非空行号 5. more 命令 # 命令格式 $ more [-options] file more命令可以用于分屏显示文本文件内容，每次只显示一页内容 more适合于 查看内容较多 的文本文件 使用 more 查看文件时常用操作键： 操作键 功能 Blank 下一屏 Enter 下一行 b 上一屏 q 退出 /keyword 搜索关键字 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/mkrm.html":{"url":"part1/filemg/mkrm.html","title":"2.3 新建/删除","keywords":"","body":"新建和删除 命令 说明 touch [-options] file 若文件不存在则创建文件,否则修改文件最后编辑时间 mkdir [-options] dir 创建目录。-p可以层级创建目录，如mkdir -p a/b/c rm [-options] file 删除文件或目录,删除后不可恢复 rmdir [-options] dir 删除目录,目录必须为空 1. rm 命令 # 命令格式 $ rm [-options] file rm是remove缩写，其功能是删除文件或目录(不可恢复)。 1) options options 含义 -i 开启删除确认提示，所有待删除文件将逐次提示 -r 删除文件或 递归删除目录 (包含子目录和文件) -f 强制删除，忽略不存在文件 注：删除目录可以使用rmdir dir或rm -r dir，前者只能删除空目录，后者则可以递归删除目录(不管是否为空) 2) parameter rm命令的parameter同样可以使用通配符。 # 删除以ab开头的文本文件 $ rm ab*.txt # 删除 test目录 $ rm -r test # 清空当前目录,谨慎使用 $ rm -rf * © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/cpmv.html":{"url":"part1/filemg/cpmv.html","title":"2.4 拷贝/移动","keywords":"","body":"拷贝和移动 命令 说明 cp [-options] source_file target_file 复制文件或目录 mv [-options] source_file/dir target_file/dir 移动/重命名 文件或目录 1. cp 命令 cp是copy缩写，其功能是将拷贝文件或目录。 # 命令格式 $ cp [-options] source_file target_file 1) options options 含义 -a 该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。 -i 开启覆盖文件提示。cp执行时会 默认覆盖 同名目标文件。建议每次使用-i进行安全复制 -r 复制文件或 递归复制目录 (包含子目录和文件)。格式为:cp -r source_dir target_dir -v 显示拷贝进度 2) parameter 目标文件若与源文件同名，则target_file参数可以只写目录部分，省略目标文件名。 操作对象为目录时，如果target_dir存在，则将源目录拷贝至target_dir;如果target_dir不存在，则将源目录拷贝至../target_dir重命名为指定目录。mv操作亦是如此。 # 将 ~/Documents/readme.txt 拷贝为 ~/Desktop/readme.txt $ cp ~/Documents/readme.txt ~/Desktop # 将 ~/Download/Python 拷贝到 ~/Desktop中 $ cp -r ~/Download/Python ~/Desktop 2. mv 命令 # 命令格式 $ mv [-options] source_file/dir target_file/dir mv命令是move缩写，其功能是移动/重命名文件或目录。如果移动文件或目录的源路径和目标路径一致，仅目标名称不同，可以实现文件或目录重命名。 mv命令默认可以操作文件或目录，不需要提供像 cp和rm命令一样使用-r选项 options 含义 -i 开启覆盖文件提示。mv执行时会 默认覆盖 同名目标文件。建议每次使用-i进行安全移动 -v 显示移动进度 # 将～/Download/Python目录移动到 ～/Desktop # 若~/Desktop/PythonCourse目录存在则拷贝至其中，若不存在则拷贝到～/Desktop中并重命名为PythonCourse $ mv ~/Download/Python ~/Desktop/PythonCourse # 将当前目录 test.txt 重命名为 demo.txt $ mv -i test.txt demo.txt © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/find.html":{"url":"part1/filemg/find.html","title":"2.5 搜索/重定向","keywords":"","body":"搜索/重定向/管道 命令 说明 find [path] [-options] [expression] 在目录中搜索文件 grep [-opinions] [pattern] [file] 在文本文件中查找内容 echo [-option] [string] 在终端中打印字符串。通常会和重定向联合使用 重定向和管道 重定向:\b将终端输出保存至文件;管道:对终端输出进行再操作 1. 搜索查找 1.1 搜索文件 # 命令格式 $ find [path] [-options] [expression] find命令功能非常强大，通常用来在特定目录下搜索符合条件的文件 文件查找路径缺省则在当前文件件搜索，包含子目录 # 在桌面及其子目录搜索所有txt文档 $ find ~/Desktop -name \"*.txt\" # 在当前目录及子目录搜索文件名包含“app”的文件 $ find -name \"*app*\" 1.2 查找文件内容 # 命令格式 $ grep [-opinions] [pattern] [file] grep命令是一个强大的文本搜索工具 grep允许对文本进行模式查找 1) options options 含义 -n 显示行号 -v 搜索不匹配内容(相当于搜索结果取反) -i 忽略字母大小写 2) pattern 常用的两种搜索模式,正则匹配 参数 含义 ^b 行首，搜索以b开头的行 e$ 行尾, 搜索以e结尾的行 # 在test.txt中搜索包含colin的行 $ grep colin test.txt # 在test.txt中忽略大小写搜素以colin开头的行并显示行号 $ grep -ni ^colin test.txt 2. 重定向和管道 重定向和管道都需要配合其他命令使用。 2.1 重定向 重定向命令可以将终端输出内容保存到文件中 > 将终端输出保存到文件中。文件不存在则创建，存在则覆盖 >> 将终端输出追加到文件末尾。文件不存在则创建，存在则追加 # 将“Hello”保存到 a.txt 中 $ echo Hello > a.txt # 将当前目录树状结构 追加到 a.txt 中 $ tree -d >> a.txt 2.2 管道 管道是将一个命令的输出作为另一个命令的输入。可以理解为现实生活中一根管子，管子一头塞东西进去，另一头取东西出来。 常用管道命令有： more:分屏显示输出内容 grep:对输出内容进行查询 # 分屏显示 当前目录所有内容 $ ls -lha | more # 在前目录所有内容中 搜索名称包含colin的文件或目录 $ ls -lha | grep colin © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/link.html":{"url":"part1/filemg/link.html","title":"2.6 文件链接","keywords":"","body":"文件/目录链接 1. 软连接与硬连接 Linux中链接分为软链接和硬链接。软链接类似与Windows中的快捷方式和mac OS的替身。硬链接指可以访问到文件或目录的途径，相当于文件或目录别名。 在Linux中文件名与文件内容是分开存储的，如同C#中引用类型的堆栈内存存储方式。文件名如同一个指针指向文件内容。软硬链接也都是文件指针。不同的是软链接指向的是文件名，硬链接指向的文件内容。 Linux中删除文件首先删除文件引用，只有文件没有引用(硬链接数=0)才会被删除。如同C#中文件对象没有引用时才会被GC。软硬链接指向同一个源文件，源文件删除后，实际删除的是源文件名，所以软链接会无法使用。硬链接仍指向源文件内容，文件并不会真的删除，所以硬链接仍然正常使用。 硬链接数 硬链接数表示有多少种方式访问到对应的目录或文件。 文件只能通过绝对路径访问，所以文件硬链接数一般为1，有文件硬链接同样也会增加文件硬链接数 目录可以通过绝对路径访问，.方式访问。所以目录的硬链接数至少为2(无子目录)。有直接子目录时也可以通过..方式访问，所以每多一个直接子目录硬链接数+1。Linux目录的硬链接数等于直接子目录数量+2。mac OS的目录硬链接数与Linux计算方式不同 2. ln 命令 # 命令格式 $ ln [-options] source target ln命令用于创建文件链接(一般指软链接) -s表示建立软链接文件，默认建立硬链接文件 源文件(目录)要使用绝对路径。否则链接文件移动后会造成链接文件指向出错\b而无法使用 # 在当前目录建立软链接文件ln123并指定/home/colin/Desktop/demo/123.txt $ ln -s /home/colin/Desktop/demo/123.txt ln123 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/compress.html":{"url":"part1/filemg/compress.html","title":"2.7 打包压缩","keywords":"","body":"打包压缩 命令 说明 tar [-options] [file] 打包解包文件 zip [-options] [file] 压缩或解压zip文件 1. 打包解包 # 命令格式 $ tar [-options] [file] tar是Linux最常用的备份工具。其功能是把一系列文件或目录归档到一个tar包文件中，也可以将tar包解档 tar归档操作只是打包并不会压缩文件 [file]如有多个文件或目录,使用空格分割依次排列即可 options 含义 -c 生成档案文件 -x 解开档案文件 -v 列出归档解档 -f 指定档案文件名称。-f后面是tar包名称，所以在options中放在最后 -t 列出档案中包含的文件 -z 使用gzip压缩或解压 -j 使用bzip2压缩或解压 -C 解档或解压到指定目录。目录必须存在 # 将English.txt,Chinese.txt,Europe(目录)归档为languages.tar $ tar -cvf languages.tar English.txt Chinese.txt Europe # 将languages.tar解档到当前目录 $ tar -xvf languages.tar 2. 压缩解压 1) gzip gzip是Linux下一种流行的压缩方式。 用gzip压缩tar包文件后的压缩文件扩展名是.tar.gz，这是Linux中最常见的压缩格式 tar命令使用-z可以调用gzip对tar包进行压缩，方便实现打包压缩 也可单独使用gzip压缩tar包或解压压缩文件，单使用较少。一般联合tar命令使用较多 # 将English.txt,Chinese.txt,Europe(目录)压缩为languages.tar.gz $ tar -zcvf languages.tar.gz English.txt Chinese.txt Europe # 将languages.tar.gz解压到用户桌面 $ tar -zxvf languages.tar.gz -C ~/Desktop 2) bzip2 bzip2与gzip类似也是一种流行压缩方式。 用bzip2压缩tar包文件后压缩文件扩展名是.tar.bz2 tar命令使用-j可以调用bzip2对tar包进行压缩。 # 将English.txt,Chinese.txt,Europe(目录)压缩为languages.tar.bz2 $ tar -jcvf languages.tar.bz2 English.txt Chinese.txt Europe # 将languages.tar.bz2解压到用户桌面 $ tar -jxvf languages.tar.bz2 -C ~/Desktop 3) zip/unzip zip压缩格式不同于gzip和bzip2联合tar命令使用，zip可以指定文件或目录压缩到指定的压缩包中。zip格式的压缩包常用于各大平台操作系统。 # 命令格式 $ zip [-options] zip path $ unzip [-options] path zip 通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。 # 将用户Download目录递归压缩到test.zip中 $ zip -r test ~/Download # 将test.zip解压到temp目录中 $ unzip -d temp test © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/filemg/vim.html":{"url":"part1/filemg/vim.html","title":"2.8 vi/vim","keywords":"","body":"vi/vim编辑器 vi编辑器是linux下流行的文本编辑器。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制。vim则是基于vi的高级编辑器。所有vim兼容vi所有的命令。Ubuntu部分版本的vi编辑器不太好用，推荐使用vim替代。 1. 工作模式 vi编辑器有以下三种工作模式。 1.1 命令模式 # 查看文件,如果文件不存在则新建文件 $ vi [文件名] # 打开vi命令行编辑器并进入查看模式 进入vi编辑器之后，默认进入命令模式。任何模式，按一下ESC键，即可进入命令模式。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。 1.2 编辑模式 在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。 命令 功能 i 插入光标前一个字符 I 插入行首 a 插入光标后一个字符 A 插入行未 o 向下新开一行,插入行首 O 向上新开一行,插入行首 1.3 末行模式 # 所有命令必须进入命令模式后才能执行，命令执行完毕自动进入查看模式 : # 进入末行模式,可以执行以下命令 wq # 保存并退出 q! # 不保存退出 set nu # 显示行号 set nonu # 取消行号 %d # 清空文件内容 输入任意数字 # 光标定位到指定行号的行首位置 在命令模式下，用户按“:”键即可进入末行模式下，此时Vi会在显示窗口的最后一行(通常也是屏幕的最后一行)显示一个“:”作为末行模式的提示符，等待用户输入命令。多数文件管理命令都是在此模式下执行的(如把编辑缓冲区的内容写到文件中等)。末行命令执行完后，Vi自动回到命令模式。 2. 常用操作 2.1 命令模式 1) 移动光标 命令 功能 k 上移 j 下移 h 左移 l 右移 M 光标移动到中间行 L 光标移动到屏幕最后一行行首 G 移动到指定行,行号 -G w 向后一次移动一个字 b 向前一次移动一个字 { 按段移动,上移 } 按段移动,下移 Ctr-d 向下翻半屏 Ctr-u 向上翻半屏 Ctr-f 向下翻一屏 Ctr-b 向上翻一屏 gg 光标移动文件开头 光标移动在默认的vi中只能使用kjhl来控制，vim则增加了上下左右键的支持支持。 2) 删除 命令 功能 x 删除光标后一个字符,相当于 Del X 删除光标前一个字符,相当于 Backspace dd 删除光标所在行,n dd 删除指定的行数 D: 删除光标后本行所有内容,包含光标所在字符 d0 删除光标前本行所有内容,不包含光标所在字符 dw 删除光标开始位置的字,包含光标所在字符 3) 撤销 u|一步一步撤销 Ctr-r|反撤销 4) 重复 命令 功能 . 重复上一次操作的命令 5) 文本行移动 命令 功能 >> 文本行右移 文本行左移 6) 复制粘贴 命令 功能 y 复制选中 yy 复制当前行,n yy 复制 n 行 p 在光标所在位置向下新开辟一行,粘贴 7) 可视模式 命令 功能 v 按字符选中文本 V 按行选中,选中文本可视模式可以配合 d, y, >>, 8) 查找操作 命令 功能 /或? str查找 n 下一个 N 上一个 2.2 末行模式 # 末行模式下，将光标所在行的abc替换成123 %s/abc/123/g # 末行模式下，将第一行至第10行之间的abc替换成123 1, 10s/abc/123/g © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/permission/usermg.html":{"url":"part1/permission/usermg.html","title":"3.1 用户(组)","keywords":"","body":"用户(组)权限管理 1. 用户组管理 用户组可以方便批量管理用户，每个用户必须属于一个组或多个组。为一个组赋权限后，组中所有用户自动获得相应权限 命令 说明 groupadd [-options] GROUP 添加用户组 groupdel [-options] GROUP 删除用户组 cat /etc/group 查看系统所有用户组 chgrp [-options] GROUP FILE 修改文件或目录所在组。-R表示递归修改 gpasswd -options GROUP 管理用户组。-a表示向组中添加用户,-d表示从组中移除用户 # 添加dev用户组 $ sudo groupadd dev # 删除dev用户组 $ sudo groupdel dev # 查看系统用户组 $ cat /etc/group # 将Code目录及其子目录和文件所在组递归修改为dev $ sudo chgrp -R dev Code # 将colin用户添加到sudo组中 $ sudo gpasswd -a colin sudo # 将colin用户从sudo组中移除 $ sudo gpasswd -d colin sudo 添加用户到组中除了使用gpasswd -a user group命令，也可以使用usermod -a -G group user。 2. 用户管理 命令 说明 su [-options] [user] 切换用户 useradd [-options] user 创建新用户 passwd [-options] [user] 设置用户密码 userdel [-options] [user] 删除用户。-r可以连同删除用户主目录 cat /etc/passwd 查看系统所有用户信息 id [-options] [user] 查看用户和所在组信息 who [-options] 查看当前登录到系统的活跃用户 whoami 查看当前用户名 usermod [-options] user 修改用户信息 2.1 root 用户 Linux系统中root账号通常用于系统维护和管理，其对操作系统所有资源 具有所有访问权限 Linux安装过程中，系统会自动创建一个用户账号，而这个默认用户称为“标准用户” 标准用户执行命令没有权限时，可以在命令开始添加sudo来执行。 sudo命令用来以其他身份来执行命令，预设的身份为root 用户使用sudo时需要输入密码，密码5分钟有效 只有sudo用户组中用户才可使用sudo,未经授权用户使用sudo会发警告邮件给管理员 $ sudo rm -r Application # 以管理员身份删除Application目录 若要切换到root用户，参阅 切换到root用户 2.2 切换用户 # 命令格式 # 切换用户 $ su [-options] [user] # 退出当前登录用户 $ exit options为-或-l会在切换用户时同时切换到用户主目录 以下命令都可以切换到root用户 $ su $ sudo -i 切换和退出用户示意图： # 切换test用户并切换到其主目录(/home/test) $ su - test # 退出test用户 $ exit # 切换root用户 $ su 2.3 创建用户 1) useradd 命令 # 命令格式 $ useradd [-options] user options 含义 -m 自动创建用户主目录 -g 指定用户所属组。若不指定会自动创建一个用户组 -d 指定用户主目录为现有目录 创建用户最好添加-m创建用户主目录，否则后续创建目录、设置权限非常繁琐。如果忘记，最简单的方法就是立即删除用户，重新创建 通过-d指定用户主目录后，如果用户可能对此目录没有权限则需要赋予相应权限，比如添加到所有者组或者修改目录所有者。 # 创建colin用户并分配到dev组，同时创建用户主目录 $ sudo useradd -m -g dev colin 2) passwd 命令 # 命令格式 $ passwd [-options] [user] passwd不指定用户默认给当前用户修改密码 创建用户后必须设置用密码之后才可以登录 # 给colin设置密码 $ passwd colin 2.4 查看用户信息 1) passwd 文件 /et/passwd文件存在的是所有用户的信息，每条记录是一个用户，记录7个字段，以\":\"分割，形如 $ cat /etc/passwd # 结果示例 # colin:x:1000:1000:Colin Chang,,,:/home/colin:/bin/bash # test:x:1001:1001::/home/test:/bin/sh 用户名 密码 UID GID 用户全名或本地账号 主目录 Shell colin x 1000 1000 Colin Chang,,, /home/colin /bin/bash test x 1001 1001 /home/test /bin/sh 密码x表示密码加密不显示，即使没有设置密码 UID是用户唯一的ID标识 GID是用户主组唯一的ID标识 Shell表示用户登录时使用的终端。可修改shell 没有内容的项全部留空 2) id 命令 # 命令格式 $ id [-options] [user] id命令可以快速方便的查看用户和所在组信息。不指定用户默认显示当前用户信息。命令执行结果示例如下： # 查看colin用户信息 $ id colin # 执行结果如下 # uid=1000(colin) gid=1000(colin) groups=1000(colin),4(adm),24(cdrom),27(sudo) groups列出了用户的所有所在组(主组+附加组)。gid为主组ID 3) 其他相关命令 # 查看登录到系统的活跃用户 $ who # 查看当前当前登录用户 $ whoami 2.5 修改用户信息 2.5.1 主组与附加组 一个用户可以隶属与多个组。其中至少包含一个主组和任意多个附加组。 主组：通常在用户创建时指定。主组ID在/etc/passwd的第四列GID。通过id命令快速查看主组信息 附加组：用于指定 用户附加权限。在/etc/group中最后一列表示该组所有用户列表。通过id命令结果groups可以快速查看所有所在组(主组+附加组) 2.5.2 usermod 命令 # 命令格式 $ usermod [-options] user usermod命令可以修改用户信息，如用户主组、附加组、主目录、shell等。 options 含义 -g 修改用户主组。用户创建后一般不会修改主组 -G 修改用户附加组。一般配合-a来完成向其它组添加 -s 修改shell 1) 修改组 修改用户组后需要重新登录才能生效 useradd添加的用户默认无法以root身份执行命令。若要使用可以将用户附加到sudo中 # 将colin用户附加到sudo组中 $ sudo usermod -a -G sudo colin 2) 修改 Shell Ubuntu中useradd添加的用户默认shell为dash(/bin/sh)，而系统用户使用的shell默认为bash(/bin/bash)。bash在颜色渲染和使用上更加方便。 修改用户Shell后需要重新登录方可生效 # 修改test用户的shell为bash $ sudo usermod -s /bin/bash test © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/permission/permission.html":{"url":"part1/permission/permission.html","title":"3.2 权限管理","keywords":"","body":"权限管理 1. 权限介绍 权限 数字代码 缩写 英文 读 4 r read 写 2 w write 执行 1 x execute 无权限 0 目录可读权限表示是否可以读取目录下内容，可写表示是否可以修改目录下内容，可执行表示是否可以在此目录执行命令 2. 修改权限 Linux修改权限有一下三种方式: 命令 作用 chown [-options] [owner] FILE 修改所有者 chgrp [-options] GROUP FILE 修改所在组 chmod [-options] MODE FILE 直接修改权限 2.1 chown 命令 # 将123.txt所有者修改为test用户 $ sudo chown test 123.txt # 将code目录所有者修改为test用户 $ sudo chown test code 2.2 chmod 命令 chmod是change mode缩写，其功能是修改用户(组)对文件或目录的权限 1) 加减方式 # 命令格式 $ chmod +/-r|w|x file|dir 添加权限使用+,移除权限使用- 此种方式会同时修改 所有者、所在组、其他组 权限，不能精确修改三者各自权限 $ chmod +x 123.txt # 添加123.txt文件的可执行权限 $ chmod -rw demo # 移除demo目录的读写权限 2) 数字方式 # 命令格式 $ chmod [-options] xxx file -R表示递归修改文件目录权限 chmod可以简单的使用三个数字分别设置 拥有者/所在组/其他组权限 xxx代表三个0-7的数字。每位数字含义为各部分权限数字代码的和值。权限数字代码结构如下表 所有者权限所在组权限其他组权限 rwxrwxrwx 421421421 权限各位权限码权限值 rwx4217 rw-4206 r-x4015 r--4004 -wx0213 -w-0202 --x0011 ---0000 常见权限组合有 权限组合所有者权限所在组权限其他组权限 777rwxrwxrwx 755rwxr-xr-x 644rw-r--r-- # 递归修改ColinBlog目录的权限为 所有者可读可写可执行,所在组可读可执行,其他组可读可执行 $ chmod -R 755 ColinBlog © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/maintenance.html":{"url":"part1/maintenance.html","title":"4. 系统维护","keywords":"","body":"系统维护 1. 日期时间 2. 磁盘管理 3. 进程管理 4. 运行级别 1. 日期时间 命令 作用 date [-options] [-format] 查看系统时间 cal [-options] 查看系统日历 -y显示当年日历 $ date #查看系统时间 $ cal -y # 查看当年日历 服务器时间校准 # 同步本地时区(北京时间)到远程服务器 $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 2. 磁盘管理 命令 作用 df [-options] [FILE] 显示磁盘容量、已用空间、剩余空间、使用例等 du [-options] [FILE] 显示目录下文件大小。 2.1 df命令 -h以人性化方式显示文件尺寸 df(disk free)命令用于检测文件系统的磁盘空间占用和空余情况，可以显示所有文件系统对节点和磁盘块的使用情况 df命令结果中挂载点为为根目录('/')的记录表示系统磁盘使用情况 options 含义 -h 以人性化方式显示文件尺寸 -a 显示所有文件系统的磁盘使用情况 -m 以1024字节为单位显示 -t 显示各指定文件系统的磁盘空间使用情况 -T 显示文件系统 $ df -h # 显示磁盘使用情况 2.1 du命令 du(disk usage)命令用于统计目录或文件所占磁盘空间的大小，该命令的执行结果与df类似，du更侧重于磁盘的使用状况 du命令不指定FILE，默认为当前目录。结果中最后一条记录.表示当前目录整体尺寸 options 含义 -a 递归显示指定目录中各文件和子目录中文件占用的数据块 -s 显示指定文件或目录占用的数据块 -b 以字节为单位显示磁盘占用情况 -l 计算所有文件大小，对硬链接文件计算多次 $ df -h # 显示磁盘使用情况 $ du -h Desktop # 显示桌面目录内容尺寸 3. 进程管理 命令 作用 ps [options] 查看进程信息。 top [-options] 动态显示进程有序详细信息。类似Windows进程排序列表 kill [-signal] pid 终止进程 1) ps命令 ps命令options前不使用 \"-\" ps默认只显示 当前用户 终端启动的进程 options 含义 u 进程详细信息 a 所有用户 终端启动的进程 x 所有进程 包含非终端启动的进程 -w 显示加宽，以便显示更多的信息 -r 只显示正在运行的进程 # 显示当前用户终端启动进程信息 $ ps # 显示所有用户终端启动进程详细信息 $ ps au # 显示所有用户所有进程详情 # ps aux 2) top命令 top命令用来动态显示运行中的进程。top命令能够在运行后，在指定的时间间隔更新显示信息。可以在使用top命令时加上-d来指定显示信息更新的时间间隔。 在top命令执行后，可以按下按键得到对显示的结果进行排序： 按键 含义 M 根据内存使用量来排序 P 根据CPU占有率来排序 T 根据进程运行时间的长短来排序 U 可以根据后面输入的用户名来筛选进程 K 可以根据后面输入的PID来杀死进程。 q 退出 h 获得帮助 3) kill命令 信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程 出于安全考虑，我们一般只管理当前用户开启的进程。如果中止root用户的进程可能导致系统崩溃 一般只使用终端命令方式管理Linux，故而一般只关注终端启动的进程 # 强制种植PID为1278的进程 $ kill -9 1278 4. 运行级别 Linux运行级别类似于windows中的安全模式等不同的启动模式。 常用目录速查表: 运行级别 含义 0 关机 1 单用户 2 没有网络服务的多用户状态 3 有网络服务的多用户状态 4 系统未使用保留给用户 5 图形界面 6 系统重启 最常用的运行级别是3和5，可以通过修改/etc/inittab文件来修改系统运行级别。 init [运行级别] 马上进入指定运行级别，单次有效 运行级别设置不当可以在启动时修改编辑启动项进入单用户模式，修改运行级别然后重启即可。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part1/remote.html":{"url":"part1/remote.html","title":"5. 远程管理","keywords":"","body":"Linux远程管理 命令 说明 logout [n] 注销登录的shell。不在shell执行报错 shutdown [-options] [time] 关机/重启 ifconfig [-options] 查看或配置网卡信息 ping [-options] destination 检测到目标地址连接通讯是否正常 ssh [-options] [user@hostname] 远程连接服务器 scp [-options] [[user@]host1:]file1 [[user@]host2:]file2 远程复制文件 1. shutdown命令 # 命令格式 $ shutdown [-options] [time] shutdown命令一般需要root权限执行 远程维护服务器时，最好不要关闭系统(关闭后启动不方便)，一般选择重启系统 1) options options 含义 缺省 默认行为为关机 -r 重新启动。shutdown -r now 等价于 reboot -c 取消代执行的关机或重启任务，必须在关机或重启之前执行 2) time \boptions 含义 缺省 默认为1分钟后执行 +m m分钟后执行 now 现在立即执行 hh:mm 指定时间执行,只能设置小时和分钟 # 1分钟后关机 $ shutdown # 立即重启 $ shutdown -r now # 10分钟后关机 $ shutdown +10 # 今天20:30 重启 $ shutdown -r 20:30 # 取消关机或重启任务 $ shutdown -c 2. ifconfig命令 # 命令格式 $ ifconfig [-options] 如果命令不存在，需要先进行安装sudo apt install net-tools 一台计算机可能有一个物理网卡和多个虚拟网卡，在Linux中物理网卡名字通常为ensXX # 查看网卡配置信息 $ ifconfig # 过滤查看IP地址 $ ifconfig | grep inet 3. ping命令 # 命令格式 $ ping [-options] destination ping一般用于检测当前计算机到目标计算机之间的网络是否通畅。我们给目标IP发送一个数据包，对方返回一个包，根据返回包的时间我们可以确定目标计算机是否存在并且工作正常以及网络链接速度。 Linux中ping命令不会自动停止，可以使用Ctrl + C退出。 ping 127.0.0.1 可以测试本机网卡是否正常工作 4. ssh命令 4.1 ssh基础使用 ssh客户端是一种使用Secure Shell(ssh)协议连接到运行了ssh服务端的远程服务器上。 ssh是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议 有效防止远程管理过程中的信息泄漏 传输 数据加密，能够防止DNS和IP欺骗 传输 数据压缩，加快传输速度 Mac和Linux中默认已安装ssh客户端，可直接在终端中使用ssh命令。Windows则需手动安装ssh客户端，较常用的Windows SSH客户端有PuTTY和XShell # 命令格式 $ ssh [-options] [user@hostname] options 含义 -p 指定ssh端口号,默认端口为22 -i 使用指定私钥文件连接服务器(免密登录) user远程服务器登录的用户名，默认为当前用户 hostname远程服务器地址。可以是IP/域名/别名 exit或logout命令均可退出当前登录 # 以colin用户登录192.168.1.196的到ssh服务器 $ ssh colin@192.168.1.196 # \b以colin用户登录到192.168.1.198的ssh服务器，使用2222端口 $ ssh -p 2222 colin@192.168.1.198 4.2 ssh高级配置 ssh配置信息都保存在~/.ssh 中 配置文件 作用 known_hosts 作为客户端。记录曾连接服务器授权。ssh第一次连接一台服务器会有一个授权提示，确认授权后会记录在此文件中，下次连接记录中的服务器时则不再需要进行授权确认提示 authorized_keys 作为服务端。客户端的免密连接公钥文件 config 作为客户端。记录连接服务器配置的别名 1) 服务器别名 远程管理命令(如ssh,scp等)连接一台服务器时一般都需要提供 服务器地址、端口、用户名 ，每次输入比较繁琐，我们可以把经常使用的服务器连接参数打包记录到配置文件中并为其设置一个简单易记的别名。这样我们就可以通过别名方便的访问服务器，而不需要提供地址、端口、用户名等信息了。 配置方法如下： 创建或打开 ~/.ssh/config，在文件追加服务器配置信息 一台服务器配置格式如下Host ColinMac HostName 192.168.1.196 User colin Port 22 配置完成后远程管理命令中就可以直接使用别名访问了，如$ ssh ColinMac $ scp 123.txt ColinMac:Desktop 2) 免密登录 # 命令格式 $ ssh-keygen [-options] options 含义 -t 指定加密类型,默认为非对称加密(rsa), 所有可选项[dsa,ecdsa,ed25519,rsa] -f 密钥文件名。 -C 注释，将附加在密钥文件尾部 远程管理命令(如ssh,scp等)每次都需要提供用户密码保证安全。除此之外，我们也可配置使指定加密算法验证密钥文件的方式，避免每次输入密码 配置免密登录后，ssh连接和scp等远程管理命令都不需要再输密码 生成密钥时若指定了文件名，连接服务器时需要通过-i指定要验证的密钥文件,形如：ssh -i file user@host。默认文件名则可省略 默认配置只需以下两步： # 客户端生成密钥对 $ ssh-keygen # 上传公钥到服务器 $ ssh-copy-id user@hostname # 文件会自动上传为服务器特定文件 ～/.ssh/authorized_keys Google Cloud 密钥链接 出于安全考虑，GCP(Google Cloud Platform)的公钥文件一般需要人工填写到平台的元数据配置中，且GCP只允许使用密钥文件验证登录方式进行连接。 # 以非对称加密方式生成密钥文件my-ssh-key保存到~/.ssh目录下。 # 密钥文件以colin(将作为GCP的用户名)作为注释 $ ssh-keygen -t rsa -f ~/.ssh/my-ssh-key -C colin # 连接GCP $ ssh -i ~/.ssh/my-ssh-key colin@35.236.93.139 5. scp命令 # 命令格式 $ scp [-options] [[user@]host1:]file1 [[user@]host2:]file2 scp是secure copy缩写，可以在Linux中远程拷贝文件.以ssh连接方式书写远程地址，拷贝于cp命令类似。 scp命令只能在Unix内核系统(如Linux/mac OS) 中运行。在Windows中文件传输推荐使用FTP工具,如FileZilla options 含义 -r 远程拷贝文件或递归拷贝目录 -P 指定远程服务器端口号，默认22端口可以省略 # 将本地123.txt远程拷贝到192.168.1.196服务器的colin用户的Desktop目录并重命名为test.txt $ scp 123.txt colin@192.168.1.196:Desktop/test.txt # 将192.168.1.196服务器的colin用户的Desktop/test.txt远程拷贝到本地当前目录并重命名为123.txt $ scp conlin@192.168.1.196:Desktop/test.txt 123.txt # 将本地~/Desktop/Python拷贝到192.168.1.196服务器的colin用户的Desktop目录下 $ scp -r ~/Desktop/Python colin@192.168.1.196:Desktop © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part2/ftp.html":{"url":"part2/ftp.html","title":"1. FTP","keywords":"","body":"FTP安装和配置 1. Debian/Ubuntu 1) 安装vsftp $ sudo apt install vsftpd 2) 配置vsftp # 编辑vsftp配置文件 $ vi /etc/vsftpd.conf 作以下配置： 配置 作用 anonymous_enable=NO 禁用匿名用户 local_enable=YES 允许本机登录 write_enable=YES 允许写入操作(上传或删除) 前两项配置为默认值，一般只需要修改write_enable即可。 # 修改配置后需要重启服务 $ sudo service vsftpd restart 3) 用户配置 安装vsftp时会自动创建ftp用户组。在ftp组中的用户都可以进行ftp连接。用户的ftp目录默认限制为用户的主目录。所以只需要将现有用户添加到ftp组或创建用户指定到ftp组中即可。 现有用户 # 将用户colin添加到ftp组 $ sudo gpasswd -a colin ftp # 完成后colin可以登录ftp，共享目录默认为 /home/colin 新建用户 # 添加test用户 $ sudo useradd -m -g ftp test # 完成后test可以登录ftp，共享目录默认为 /home/test 如果想多用户共享同个ftp目录，可以创建多个用户主目录指向共享目录即可。可以将共享目录的用户组设置为ftp组,以保证所有ftp用户的都有此目录权限。 多用户共享目录 # 创建共享目录 $ mkdir /usr/share/ftp # 修改目录所在组 $ sudo chgrp -R ftp /usr/share/ftp/ # 修改共享目录权限 $ chmod -R 470 /usr/share/ftp # 创建user1,user2用户到ftp组并指定主目录为共享目录 $ sudo useradd -d /usr/share/ftp/ -g ftp user1 $ sudo pssswd user1 $ sudo useradd -d /usr/share/ftp/ -g ftp user2 $ sudo pssswd user2 # user1,user2 都可登录ftp并共享/usr/share/ftp/目录 ftp用户一般只可进行ftp操作。如果常规用户(非ftp用户)想使用ftp，添加到ftp组即可使用主目录使用ftp功能。如果想访问其他ftp用户的共享目录，如上面案例的/usr/share/ftp/,添加相应权限即可。 ftp服务器配置完成后，务必开放ftp端口(默认21)，不同服务器开放方式不同，在此不再赘述 2. Windows Server 我们推进使用FileZilla在Windows Server中快速搭建FTP服务器。 FileZilla是一个免费开源的FTP软件，分为客户端版本和服务器版本，具备所有的FTP软件功能。可控性、有条理的界面和管理多站点的简化方式使得Filezilla客户端版成为一个方便高效的FTP客户端工具，而FileZilla Server则是一个小巧并且可靠的支持FTP&SFTP的FTP服务器软件。 FileZilla服务端仅支持Windows平台，客户端支持Windows/mac OS/Linux。 1) 安装 https://filezilla-project.org/download.php?type=server 下载服务端软件后，直接安装即可。 2) 配置 点击工具栏上的user按钮小图标，进入用户配置界面；点击【Add】按钮新增用户；在弹出的对话框中输入用户名（本例测试用户名为tencent-qcloud），点击【OK】进入下一步： 勾选“password”，为新增的用户设置密码，点击【OK】按钮： 切换到Shared folders，添加共享目录并勾选相应权限： 被动模式设置(Passive mode)。FTP的客户端默认以Passive mode连接服务器，Filezilla会随机打开1-65535之间的一个端口。可以根据实际客户端连接数调整开放端口数量。设置完成之后需要在服务器防火墙放开对应的端口。Google Cloud等服务器，另外还需要在服务器控制台中放开指定端口。 启动TLS模式。解决\"FTP over TLS is not enabled, users cannot securely\"问题。 按照图示启用TLS模式并生成TLS证书。在FTP客户端连接服务器，并信任证书即可。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 20:06:53 "},"part2/mysql.html":{"url":"part2/mysql.html","title":"2. MySQL","keywords":"","body":"MySQL安装和配置 MySQL是当下流行的跨平台高性能的数据库。下面我们简单的介绍以下Ubuntu和mac OS中的安装和配置方法 1. 安装MySQL 1) mac OS # 清理历史。若为首次安装则可跳过此部分 $ brew uninstall mysql $ brew cleanup $ sudo rm -rf /usr/local/var/mysql # 安装 $ brew update $ brew install mysql 2. 简单配置 1) mac OS # 修改目录权限。否则会出现类似 \"ERROR! Manager of pid-file quit without updating file.\" $ sudo chmod -R 757 /usr/local/var/mysql # 启动mysql服务 $ sudo mysql.server start $ 设置密码和简单配置。 $ mysql_secure_installation # # 设置密码完成后会出现以下选项，可以根据实际情况进行选择。 # # 是否删除默认无密码用户 # Remove anonymous users? (Press y|Y for Yes, any other key for No) # # 是否禁止远程root登录 # Disallow root login remotely? (Press y|Y for Yes, any other key for No) # # 是否删除默认自带的test数据库 # Remove test database and access to it? # # 重新加载配置以应用当前修改 # Reload privilege tables now? (Press y|Y for Yes, any other key for No) # 启动停止MySQL服务 前台运行 $ sudo mysql.server start/stop/restart 后台运行 $ brew services start/stop/restart mysql © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part2/nginx.html":{"url":"part2/nginx.html","title":"3. Nginx","keywords":"","body":"Nginx安装和配置 Nginx是当下流行的跨平台高性能的HTTP和反向代理服务。下面我们简单的介绍以下Ubuntu和mac OS中的安装和配置方法 1. 安装 nginx 1) Ubuntu # 更新apt $ sudo apt update # 安装nginx $ sudo apt install nginx nginx安装完成之后默认已经启动，可以直接访问 http://localhost/， 如果看到欢迎页面说明nginx安装成功。 2) mac OS # 更新brew $ brew update # 安装nginx $ brew install nginx nginx安装完成之后默认已经启动，可以直接访问 http://localhost:8080/， 如果看到欢迎页面说明nginx安装成功。 2. 简单配置 nginx主配置文件为nginx.conf。反代功能只需简单配置 http节点即可。简单配置实例如下: upstream proxygroup { server 35.236.93.136:5000 weight=1 max_fails=2 fail_timeout=30s; server 35.236.93.138:5001 weight=1 max_fails=2 fail_timeout=30s; } server { listen 80; server_name localhost 35.236.93.135 bet518.win www.bet518.win; location / { proxy_pass http://proxygroup; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 以上配置是将对localhost,35.236.93.139,bet518.win,www.bet518.win等地址80端口的访问平均分发到35.236.93.136:5000和35.236.93.138:5001。 修改配置之后需要重新加载或重启nginx服务 详细配置含义可以参考 https://blog.csdn.net/chenweijiSun/article/details/70823482 https://www.jianshu.com/p/cee15a00728b http://tengine.taobao.org/nginx_docs/cn/docs/ 1) Ubuntu 默认配置文件在/etc/nginx/目录中 配置文件include指令可以将其他文件内容引用的当前指令的位置。nginx/1.14.0 (Ubuntu)的主配置文件中include /etc/nginx/sites-enabled/*;将/etc/nginx/sites-enabled/目录下所有文件引入，此目录下默认只有default文件，此文件是一个软链接指向/etc/nginx/sites-available/default。/etc/nginx/sites-available/default此文件是nginx的默认配置文件 2) mac OS 默认配置文件在/usr/local/etc/nginx/目录中 mac中可以使用brew uninstall nginx卸载nginx，但会有配置文件等遗留文件导致重装后存在问题。可以使用find /usr/local/ -name \"*nginx*\"命令查找所有相关文件并手动清理后再重装。 mac中配置nginx若提示某系目录和文件不存在错误，手动创建相应文件即可 nginx相关命令 # 启动 $ sudo nginx # 停止 $ sudo nginx -s stop # 退出 $ sudo nginx -s quit # 重启 $ sudo nginx -s reopen # 重新加载配置 $ sudo nginx -s reload 若需通过外网访问nginx需要在服务器防火墙放开对应端口 3. 虚拟主机 虚拟主机是一种特殊的软硬件技术，它可以将网络上的一台物理主机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个Web服务，每个虚拟主机之间是独立的，互不影响。 3.1 三种虚拟主机 1) 基于ip的虚拟主机， (一台主机绑定多个ip地址) server{ listen 192.168.1.1:80; server_name localhost; } server{ listen 192.168.1.2:80; server_name localhost; } 2) 基于域名的虚拟主机(servername) server{ listen 80; server_name www.nginx1.com www.nginx2.com; } server{ listen 80; server_name www.nginx3.com; } 3) 基于端口的虚拟主机(listen不写ip的端口模式) server{ listen 80; server_name localhost; } server{ listen 81; server_name localhost; } 3.2 静态服务器配置 使用nginx虚拟主机技术科技在nginx上挂在多个Web服务 如果使用nginx挂载网站，其默认文件访问路径一般通过root属性指定。Linux中默认使用绝对路径/var/www/html/，Mac中默认使用相对路径html。 建议将网站文件放在nginx的root指定目录或其子目录下，其他目录可能导致nginx无权访问，造成nginx莫名出现404错误 mac OS中相对路径文件定位 mac OS中nginx配置大多使用相对路径，相对路径都是相对与nginx运行程序本身,我们可以通过以下步骤定位文件。 # 定位nginx程序路径 $ which nginx # 输出 /usr/local/bin/nginx # 切换到程序目录 $ cd /usr/local/bin/ # 确认nginx程序文件是否为软链接 $ ls -lh nginx # 确认为软软链接，链接指向 ../Cellar/nginx/1.15.4/bin/nginx # 切换到链接目录· $ cd ../Cellar/nginx/1.15.4/bin/ # 此为nginx程序真正目录 # 查看nginx当前版本目录 $ cd .. # 切换到nginx当前版本目录 $ ls -lh # 找到root中使用的html目录，html又是一个软链接，链接指向 ../../../var/www # 切换到链接目录 $ cd ../../../var/www # 输出最终网站文件目录 $ pwd # /usr/local/var/www mac OS中配置大量使用多层相对路径和软连接，导致定位文件或目录十分繁琐，相比之下，Linux中配置要简单许多。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "},"part2/gui.html":{"url":"part2/gui.html","title":"4. 界面系统","keywords":"","body":"图形界面Linux管理 1. 设置服务器镜像源 2. 安装Chrome和Sogou 3. which 命令 部分用户选择为Linux安装图形界面，这里我们以Ubuntu为例，简单介绍下带有图形界面的Ubuntu的常用软件安装。 1. 设置服务器镜像源 Ubuntu官方服务器在境外，连接速度较慢。为此Ubuntu提供了选择最佳服务器的功能，方便我们选择一个速度最快的镜像服务器。 步骤如下(Ubuntu 18.04.1 LTS) 搜索并打开 软件和更新 设置 下载自->其他站点... 点击 选择最佳服务器 稍后 选择服务器 提示:更换服务器之后，需要一段时间的更新过程，需要耐心等候。更新完毕后再次安装和更新软件都会连接新设置的服务器。 2. 安装Chrome和Sogou 1) 安装Chrome 下载Chrome for Linux的Deb安装包 执行以下命令 $ sudo apt install libappindicator1 $ sudo dpkg -i $ sudo apt -f install 2) 安装Sogou 搜索并打开语言支持修改键盘输入法系统为fcitx 如果没有fcitx选项则需要先安装fctix。默认有fctix选项可以跳过此步 # 安装fcitx所需组件 $ sudo apt install fcitx fcitx-tools fcitx-config* fcitx-frontend* fcitx-module* fcitx-ui-* presage # 卸载fctix与sogou冲突的组件 $ sudo apt remove fcitx-module-autoeng-ng $ sudo apt remove fcitx-module-fullwidthchar-enhance $ sudo apt remove fcitx-module-punc-ng 下载Sogou for Linux的Deb安装包 执行以下命令安装 $ sudo dpkg -i # 执行安装命令会存在一个依赖关系配置错误，执行下面的语句可以修复此依稀配置问题 $ sudo apt -f install 卸载iBus导致系统设置打不开修复方案 安装输入法过程中，不要卸载系统自带的iBus输入法系统选项。如果不小心卸载输入法之后发现系统设置无法打开，可以通过以下方式修复 $ sudo apt-get install gnome-control-center #如果系统设置打不开，请重新安装gnome-control-center $ sudo apt-get install unity-control-center #如果设置里只有很少的几个图标请重新安装unity-control-center 3. which 命令 # 命令格式 $ which [-a] command which 命令可以用于定位Linux命令文件所在目录。 $ which ls # 输出 /bin/ls $ which useradd # 输出 /usr/sbin/useradd 命令文件一般存储在/bin,/sbin,/usr/bin,/usr/sbin四个目录中，具体可参照上表 cd命令是内置在系统内核中的没有独立文件,因此which无法知道cd命令位置 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 20:14:20 "},"part4/crossgfw.html":{"url":"part4/crossgfw.html","title":"1. 科学上网","keywords":"","body":"科学上网 GFW - 长城高筑 防火长城（英语：Great Firewall of China，常用简称：GFW，中文也称中国国家防火墙，中国大陆民众俗称防火墙等），是对中华人民共和国政府在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于1998年，其英文名称得自于2002年5月17日Charles R. Smith所写的一篇关于中国网络审查的文章《The Great Firewall of China》，取与Great Wall（长城）相谐的效果，简写为Great Firewall，缩写GFW。随着使用的拓广，中文“墙”和英文“GFW”有时也被用作动词，网友所说的“被墙”即指被防火长城所屏蔽。 翻墙 - 哪里有压迫，哪里就有反抗 GFW阻挡了我们享受网络自由，但人们对于自由的渴望与追求从未止步。有“墙”，自然就有人“翻墙”。翻墙早已成为社会主义特色的一部分，不知道儿孙们以后看到我们现在的状态会做何感想，可能会像我们现在不能体会那些莫名其妙的明清文字狱一样。 你问我翻墙的价值是什么。那我告诉你， 为了工作，为了学习，为了感受生活，为了看到墙内没有的东西，为了了解真相，为了知道这个世界究竟是什么样的，为了自己不是一直傻傻地走过这一遭，为了不被儿孙们耻笑…… 翻墙技术 - 这就搞起来 翻墙技术有很多，各种梯子，各种代理，各种翻墙工具，不胜枚举。VPN，SS，SSR，V2Ray,Brook，WireGuard等各种技术与协议也是百花齐放... 现有的VPN和SS/SSR技术算是比较流行的翻墙技术，但也相对陈旧了一些，我们这里就不做过多介绍了。我们这里主要介绍一下目前相对稳定安全快速的V2Ray，小众种子选手Brook和下一代VPN未来的WireGuard。 下一代VPN协议 - WireGuard 全能翻墙工具 - V2Ray 小众好用的代理软件 — Brook © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 19:16:05 "},"part4/wg.html":{"url":"part4/wg.html","title":"2. WireGuard","keywords":"","body":"下一代VPN协议 - WireGuard 1.WireGuard简介 2.WireGuard使用 3.WireGuard 1. WireGuard 简介 WireGuard被视为下一代VPN协议，用来替代OpenVPN，IPSec等VPN协议。 目前支持Linux,Windows,mac OS,Android,iOS等主流平台。 WireGuard协议作为Linux内核模块运行，所以效率极高。使用了最先进的加密技术(利用Curve25519进行密钥交换，ChaCha20和Poly1305用于数据认证，BLAKE2用于散列)，安全性毋庸置疑。WireGuard支持IP地址漫游，也就是网络断开再连，对它不会有影响。 WireGuard使用UDP协议传输数据，在不使用的情况下默认不会传输任何 UDP 数据包，所以比常规VPN省电很多，可以像SS一样一直挂着使用。WireGuard协议的速度瞬秒其它VPN协议。 2. WireGuard 上手 2.1 服务端 除了使用第三方提供的WireGuard节点外，相信小伙伴们已经迫不及待的想自建服务器，小试身手了，话不多说，这就操练起来吧... 既然为Linux内核模式，那自然要部署在Linux上喽。WireGuard服务器搭建过程也非常简单，按照以下步骤执行即可。 1) CentOS7 $ sudo -i $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime $ yum update $ yum install -y wget # 使用一键安装脚本 $ wget https://raw.githubusercontent.com/hongwenjun/vps_setup/master/centos7_wireguard_install.sh $ chmod -R 744 centos7_wireguard_install.sh $ ./centos7_wireguard_install.sh # # 按照脚本提示进行安装 # 1.升级系统内核 # 2.安装wireguard # 升级系统内核完成后需要重启服务器。服务器重启完毕后执行以下命令： $ sudo -i $ ./centos7_wireguard_install.sh # 一键WireGuard多用户配置 $ wget -qO- https://git.io/fpnQt | bash TCP伪装 简单介绍下这个东西,udp2raw tunnel，通过raw socket给UDP包加上TCP或ICMP header，进而绕过UDP屏蔽或QoS，或在UDP不稳定的环境下提升稳定性。可以有效防止在使用kcptun或者finalspeed的情况下udp端口被运营商限速。支持心跳保活、自动重连，重连后会恢复上次连接，在底层掉线的情况下可以保持上层不掉线。同时有加密、防重放攻击、信道复用的功能 原理大概就是在udp包的上加上tcp的包头,让路由器不会认为这是一个udp的包。说这么多，不明白？不重要，安装很简单。 $ wget -qO- https://git.io/fpKnF | bash 至此，WireGuard服务端安装和配置已经完成。可以通过以下命令查看客户端配置。 # 查看WireGuard状态 $ wg # 查看客户端配置 $ cat /etc/wireguard/client.conf 防火墙设置 完成以上工作之后，不要忘记开放防火墙。鉴于不同VPS开放端口方式不同，此处不再赘述。 理论上只开启UDP入站即可，如果不放心可以同时开放出站 2) Ubuntu/Debian Ubuntu和Debian的安装过程与CentOS相同，只是使用的一键安装脚本不同，此处只提供差异的一键安装脚本，安装过程不再赘述。 # 一键安装wireguard 脚本 Ubuntu $ wget https://raw.githubusercontent.com/hongwenjun/vps_setup/master/ubuntu_wireguard_install.sh # 一键安装wireguard 脚本 Debian 9 $ wget https://raw.githubusercontent.com/hongwenjun/vps_setup/master/debian_wg_vpn.sh 2.2 客户端 2.2.1 电脑端 1) mac OS/Linux 由于还处在测试阶段，mac目前还没有正式版本，只能通过命令行模式使用。 wireguard-tools wireguard-tools是官方的命令行工具，使用略繁琐。 # 安装wireguard-tools $ brew install wireguard-tools # 创建配置目录 $ mkdir /usr/local/etc/wireguard # # 创建配置文件 # 配置目录创建完成后，需要自己创建配置文件。配置文件内容就是前面的‘客户端配置文件’ # vi命令使用前面已有介绍，此处不再赘述。 $ vi /usr/local/etc/wireguard/wg0.conf # 启动服务 $ sudo wg-quick up wg0 # 关闭服务 $ sudo wg-quick down wg0 # 查看WG是否启动 $ sudo wg TunSafe 除了官方的wireguard-tools工具，Tunsafe也发布了预览版的命令行工具。使用方式略简单一些。下载地址：https://tunsafe.com/osx # 启动服务 $ sudo ./tunsafe wg0.conf 使用Ctrl + C退出服务。 WireGuard也为Linux提供了客户端，目前也处于测试阶段。Linux作为桌面使用较少，不再详述。 2) Windows TunSafe为Windows平台提供了简单易用WireGuard客户端。 1⃣️ 下载安装TunSafe WireGuard客户端，地址 https://tunsafe.com/download 。因为目前测试版迭代比较快，功能也更多，使用还算稳定，推荐下载RC版 2⃣️ 导入WireGuard配置。打开TunSafe，选择Options，选择Import File…导入单个配置，或者可以拖动单个配置文件到TunSafe窗口完成导入。如果想一次性导入多个文件，可以在Options里选择Browse In Explorer，就会打开C:\\Program Files\\TunSafe\\Config这个文件夹，然后将配置文件一起复制到这个文件夹即可 3⃣️ 点击客户端的Connect即可连接VPN。Edit Config可以编辑配置文件，文末副有配置文件编辑说明 4⃣️ 也可以将多个节点配置放到一个文件夹中，再将这个文件夹放入C:\\Program Files\\TunSafe\\Config，TunSafe这时会将子文件夹列为二级菜单显示，如下图 WireGuard 分流 SS/SSR用户可能习惯了PAC模式的分流，WireGuard同样支持分流。Windows版的分流较为简单，查看此文档，几步操作实现分流。 Mac和Linux版本的客户端分流原理于Windows一直。有兴趣的读者可以参阅此处。文档实现了Linux分流，Mac版路由规则略有区别。 2.2.2 移动端 WireGuard移动端App使用方式较为简单，此处只提供下载地址，不再介绍如何使用。 1) Android WireGuard官方提供了Android客户端。 TunSafe也提供了Android客户端 2) iOS TunSafe目前提供了iOS客户端，可用于iPhone和iPad。iOS客户端需要非大陆区Apple ID下载。 3. 配置解析 #客户端虚拟网络设备 [Interface] # 本机的密钥 PrivateKey = gIIBl0OHb3wZjYGqZtgzRml3wec0e5vqXtSvCTfa42w= # 设置UDP监听端口可以让其他客户端向本机发起连接 # ListenPort = 51820 # VPN连接成功后使用的DNS服务器 # DNS = 8.8.8.8 # 拦截所有DNS请求并强制所有DNS都通过VPN # BlockDNS = true # 虚拟网络设备的内网IP地址 Address = 192.168.2.2/24 # 流量拦截功能，是否拦截所有未通过tunsafe的网络请求: # route - 使用黑洞路由阻止所有流量(直接丢弃数据包) # firewall - 通过Windows防火墙阻止除tunsafe外的所有流量 # on - 使用默认拦截机制 # off - 关闭流量拦截 # BlockInternet = route, firewall # MTU # MTU = 1420 #服务器配置 [Peer] # 服务器公钥 PublicKey = hIA3ikjlSOAo0qqrI+rXaS3ZH04Yx7Q2YQ4m2Syz+XE= # 预共享密钥 PresharedKey = SNz4BYc61amtDhzxNCxgYgdV9rPU+WiC8woX47Xf/2Y= # 需要转发流量的IP范围，如果你要把流量全部转发到服务器就填0.0.0.0/0 AllowedIPs = 192.168.2.0/24 # 服务器IP Endpoint = 192.168.1.4:8040 # 保持连接参数 PersistentKeepalive = 25 # 当服务器作为默认网关时，是否通过隧道转发多播和广播数据包 # AllowMulticast = false © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 19:24:41 "},"part4/v2ray.html":{"url":"part4/v2ray.html","title":"3. V2Ray","keywords":"","body":"全能翻墙工具 - V2Ray 1. V2Ray 简介 V2Ray(Project V) 相对于 Shadowsocks，V2Ray 更像全能选手，拥有更多可选择的协议 / 传输载体 (Socks、HTTP、TLS、TCP、mKCP、WebSocket )，还有强大的路由功能，不仅仅于此，它亦包含 Shadowsocks 组件，你只需要安装 V2Ray，你就可以使用所有的 V2Ray 相关的特性包括使用 Shadowsocks，由于 V2Ray 是使用 GO 语言所撰写的，天生的平台部署优势，下载即可使用。 2. V2Ray 上手 2.1 服务端 除了使用第三方提供的V2Ray节点外，相信小伙伴们已经迫不及待的想自建服务器，小试身手了，话不多说，这就操练起来吧... 系统要求：Ubuntu 14+ / Debian 7+ / CentOS 7+ $ sudo -i $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime $ bash 按照提示安装即可... 配置 Shadowsocks(可选) 安装完成 常用操作 操作 命令 v2ray info 查看 V2Ray 配置信息 v2ray config 修改 V2Ray 配置 v2ray link 生成 V2Ray 配置文件链接 v2ray infolink 生成 V2Ray 配置信息链接 v2ray qr 生成 V2Ray 配置二维码链接 v2ray ss 修改 Shadowsocks 配置 v2ray ssinfo 查看 Shadowsocks 配置信息 v2ray ssqr 生成 Shadowsocks 配置二维码链接 v2ray status 查看 V2Ray 运行状态 v2ray start 启动 V2Ray v2ray stop 停止 V2Ray v2ray restart 重启 V2Ray v2ray log 查看 V2Ray 运行日志 v2ray update 更新 V2Ray v2ray update.sh 更新 V2Ray 管理脚本 v2ray uninstall 卸载 V2Ray 2.2 客户端 V2Ray 搭建好了，自然要配置客户端使用咯~ V2Ray支持 Windows/ mac OS/ Linux/ Android/ iOS 等主流平台。 除Linux外，所有客户端都是简单的图形界面操作，在此不再赘述。有不明白读者，点击参考以上连接即可。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 19:16:39 "},"part4/brook.html":{"url":"part4/brook.html","title":"4. Brook","keywords":"","body":"小众好用的代理软件 — Brook 1. Brook 简介 Brook 是一个高效的 Socks5 代理软件，官方支持Windows、Linux、MacOS、IOS、Android、树莓派等设备，同时是使用 Golang 语言编写，安装、使用异常简单。 Brook 支持 自主研发 Brook（新版） 协议+Stream Brook（旧版）协议、Shadowsocks 协议、SOCKS5 协议、TCP/UDP 转发、SOCKS5代理转HTTP代理 等功能。 Brook 支持 UDP转发，无需任何设置。 支持单端口和多端口(每个端口可以单独设定密码)，这点类似于 Shadowsocks 和 ShadowsocksR 的单用户服务端。 2. Brook 上手 2.1 服务端 除了使用第三方提供的Brook节点外，相信小伙伴们已经迫不及待的想自建服务器，小试身手了，话不多说，这就操练起来吧... Brook服务端支持Linux/mac OS/Windows，我们这里还是选择以Linux为例。 2.1.1 官方脚本 # 切换到root $ sudo -i # 校准时间 $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 安装官方脚本。 最新版脚本地址可以从官方 https://github.com/txthinking/brook/releases $ wget https://github.com/txthinking/brook/releases/download/v20181212/brook $ chmod -R 744 brook $ ./brook # 以服务方式开机启动。不同发行版Linux，命令不同此处以Debian9为例 $ screen -dmS brook ./brook server -l :5468 -p xinzhe468brook # -l指定端口，-p指定密码 2.1.2 第三方一键安装脚本 此脚本除了一键安装Brook还提供了管理功能。 系统要求：CentOS 6+ / Debian 6+ / Ubuntu 14.04 + # 切换到root $ sudo -i # 校准时间 $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 一键安装 $ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh && chmod +x brook.sh && bash brook.sh 按一下提示安装即可。 0. 升级脚本 ———————————— 1. 安装 Brook 2. 升级 Brook 3. 卸载 Brook ———————————— 4. 启动 Brook 5. 停止 Brook 6. 重启 Brook ———————————— 7. 设置 账号配置 8. 查看 账号信息 9. 查看 日志信息 10. 查看 链接信息 ———————————— 当前状态: 已安装 并 已启动 请输入数字 [0-10]: 常用操作 操作 命令 启动 /etc/init.d/brook start 停止 /etc/init.d/brook stop 重启 /etc/init.d/brook restart 查看状态 /etc/init.d/brook status 安装目录 /usr/local/brook 配置文件 /usr/local/brook/brook.conf 日志文件 /usr/local/brook/brook.log（错误日志） 2.1.2 Brook-Web 上面提到的第三方命令允许我们以命令方式管理Brook，但相对于GUI来说不是太好，不适合小白用户。Brook-Web项目就一举解决了这个问题。Brook-Web依托于Brook代理程序，通过 Python 语言实现，可以方便的在网页端管理 Brook、Shadowsocks、Socks5 代理账号。 相比与常规部署，我们这里推荐使用Docker部署。 $ sudo -i $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 安装docker $ curl -fsSL https://get.docker.com -o get-docker.sh $ sudo sh get-docker.sh # 运行docker镜像 $ docker run --net=host -d capton/brook-web /bin/bash -c \"python brook-web.py 80\" 安装完成之后打开直接访问 http://ip 即可。用户名和密码默认都是 admin Brook-Web虽然简单易用，然而程序依然不太稳定，建议读者谨慎使用。 2.2 客户端 Brook官方提供了 Windows/ Linux/ mac OS/ Android/ iOS 覆盖全平台的客户端，使用非常简单，不再赘述。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 19:13:47 "},"part4/tg.html":{"url":"part4/tg.html","title":"5. Telegram","keywords":"","body":"Telegram - 畅享安全自由通讯 1. Telegram 简介 Telegram(俗称TG或电报) 是一个跨平台的实时通讯应用，它的客户端是自由及开放源代码应用，但是它的服务器是专有应用。用户可以相互交换加密与自析构的消息，以及照片、影片、文件，支持所有的文件类型。 或许你之前没有听说过这款应用，没关系，因为它所属的公司 Telegram Messenger LLP 是一家独立的非营利公司，没有商业利益驱动，不制造新闻，不炒作，产品不被大众所知也就不难理解了。 专为聊天而生。厌倦了微信绿和微博橙，看到这种墨蓝色调还是蛮舒服的。它整体采用了 Material Design 的设计规范，功能都集中在侧滑抽屉中，主界面为聊天界面，点击主界面右下角的「大美圆」可以发起聊天。 几乎无懈可击的安全与私密性。看下用户就知道了，IS,普京,川普，没错他们都在用... 相比微信等，不解释，大家懂... 2. Telegram 下载 官方网站有正式发布 Android、iOS、Mac OS X 与 正在 Beta 的 Windows Phone 的版本。 https://telegram.org/ 需要翻墙访问😢😢😢 3. MTProxy 一次翻墙下载客户端没问题，一直翻墙使用当然也没问题，估计对翻墙不熟悉的童鞋们要哭了，还好Telegram提供了代理设置。 Telegram支持Socket5和MTProy两种代理。关于Socket5代理，Brook和V2Ray可以简单搭建不再赘述。这里我们推荐下Telegram特有的MTProxy代理，这是官方为TG专门设计的。 下面我们以 Debian9 为例，通过官方提供的docker镜像，快速的大家一台 MTProxy服务器，这就搞起来吧... $ sudo -i # 同步时间 $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 安装docker $ curl -fsSL https://get.docker.com -o get-docker.sh $ sh get-docker.sh # 获取官方docker镜像 $ docker pull telegrammessenger/proxy # 运行docker容器 $ docker run -d -p443:443 --name=mtproto-proxy --restart=always -v proxy-config:/data telegrammessenger/proxy:latest # 查看代理信息 $ docker logs mtproto-proxy 找到形如 tg://proxy?server=xxx&port=443&secret=xxx的部分就是代理信息。其中包含了服务器（server)，端口(port),密钥(secret)三部分，在客户端中添加MTProxy即可。 不同的客户端添加代理的入口有锁区别，一般在Privacy and Security或 Data and Storage设置中找到Use Proxy添加代理。 至此，即可在不翻墙的情况下使用Telegram了。 © Colin Chang all right reserved，powered by Gitbook文件修订时间： 2018-12-09 18:58:54 "}}